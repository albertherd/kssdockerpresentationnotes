1) Hyper-V as Admin
2) Install Ubuntu 18.04.02 LTS - Default Switch, Whatever Path for disk
3) Secure Boot - Microsoft UEFI Certificate authority
4) Installing Ubuntu - Minimal Installation + Download Updates
5) All Default Settings
6) Enable SSH - easier to manage

Oy25O^zCqMO1


0) Pre-presentation

    https://portal.azure.com/
    Search -> App Service Plan
    New RG / "wordpress" / Linux /

    Search -> Web App
    Basics: Existing RG / "wordpress" / Docker Image / Linux / Region / App Service Plan (existing)
    Docker: Docker Compose / Docker Hub / Public / Upload File

    Also upload the custom dotnet solution!

    Reason - takes around 5 minutes to provision


sudo apt update

1) Install Docker - the short way -

    sudo curl -sSL https://get.docker.com/ | sh

    Full details on how to do it cross platform - https://docs.docker.com/install/linux/docker-ce/ubuntu/

2) Hello world
    sudo docker run hello-world

10) First Example
    sudo docker run --name wordpress -d wordpress
    This cannot be connected from the outside since there are no port mappings

10.5) Dissecting the layers
    sudo docker history wordpress

10.6) Demo that navigating to site without exposing port did not work

11) Get the running containers
    sudo docker ps

12) Remove the current container
    sudo docker container rm <id> -f 

13) Two instances of wordpress with port mapping
    sudo docker run --name wordpress-80 -d -p 80:80 wordpress
    sudo docker run --name wordpress-6969 -d -p 6969:80 wordpress

    Open port 6969
    VM->Networking->Inbound Port Rule->
        Source-> Any, Ranges->*, Destination->Any. Port->6969, Protocol->TCP, Action->Allow, Priority->310

    Might take a second to propagate

14) Install a mysql container
    sudo docker run --name mysql -e MYSQL_ROOT_PASSWORD=albert -d mysql:5.6

    Might take a second to initialize 

15) Connect to mysql container - sanity checks

    sudo docker exec -it mysql mysql -uroot -p

    SHOW DATABASES;

15.5) Remove the newly spun mysql container and add one with ana lias

    sudo docker ps
    sudo docker container rm <id> -f 
    sudo docker run --name mysql --network-alias mysqlAlias -e MYSQL_ROOT_PASSWORD=albert -d mysql:5.6
  
16) Cleanup; set with proper network

    sudo docker stop $(sudo docker ps -a -q)
    sudo docker rm $(sudo docker ps -a -q)

    sudo docker network create wordpress

17) Re-create container images

    sudo docker run --name mysql --network-alias mysqlAlias --net wordpress -e MYSQL_ROOT_PASSWORD=albert -d mysql:5.6
    sudo docker run --name wordpress-80 --net wordpress -d -p 80:80 wordpress
    sudo docker run --name wordpress-6969 --net wordpress -d -p 6969:80 wordpress

    --SHOW THE CAN'T SELECT DATABASE ERROR-

    sudo docker exec -it mysql mysql -uroot -p

    CREATE DATABASE wordpress;

19) Follow the installation as usual, prove that wordpress works

    wordpress
    root
    albert
    mysql
    wp_

20) Upgrade to new version of mysql: 5.7

    sudo docker ps
    sudo docker container rm <id>
    sudo docker run --name mysql --net wordpress -e MYSQL_ROOT_PASSWORD=albert -d mysql:5.7

21) Adding storage

    sudo docker stop $(sudo docker ps -a -q)
    sudo docker rm $(sudo docker ps -a -q)

    sudo docker volume create wordpress

    sudo docker run --name mysql --net wordpress -e MYSQL_ROOT_PASSWORD=albert --mount source=wordpress,target=/var/lib/mysql -d mysql:5.7 
    sudo docker run --name wordpress-80 --net wordpress -d -p 80:80 wordpress
  
    sudo docker exec -it mysql mysql -uroot -p
    CREATE DATABASE wordpress;

    -- Prove it works --

    sudo docker ps
    sudo docker container rm <id>
    sudo docker run --name mysql --net wordpress -e MYSQL_ROOT_PASSWORD=albert -d mysql:5.7 

    Should show language screen

    sudo docker ps
    sudo docker container rm <id>
    sudo docker run --name mysql --net wordpress -e MYSQL_ROOT_PASSWORD=albert --mount source=wordpress,target=/var/lib/mysql -d mysql:5.7 

    Should take you to created blog

23) Prove it works with MariaDB

    sudo docker ps
    sudo docker container rm <id>
    sudo docker run --name mysql --net wordpress -e MYSQL_ROOT_PASSWORD=albert --mount source=wordpress,target=/var/lib/mysql -d mariadb

24) Docker compose time!

    Cleanup

    sudo docker stop $(sudo docker ps -a -q)
    sudo docker rm $(sudo docker ps -a -q)
    sudo docker network rm wordpress
    sudo docker volume rm wordpress

    Install

    sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    docker-compose --version

    Get the docker-compose file from WordPressOnMariaDB

25) Install on Azure

    https://portal.azure.com/
    Search -> App Service Plan
    New RG / "wordpress" / Linux / Free F1

    Search -> Web App
    Basics: Existing RG / "wordpress" / Docker Image / Linux / Region / App Service Plan (existing)
    Docker: Docker Compose / Docker Hub / Public / Upload File

    Wait (a lot apparently) - Wait for items to be provisioned plus database to come online

26) Deploy custom built application locally

    git clone https://github.com/albertherd/KSSDocker
    cd KSSDocker
    sudo docker-compose up

    demo that it works locally

27) Deploy it to Azure, with ACR

    Create Container Registry
    sudo docker login kssdocker.azurecr.io

    run PushDockerImagesToACR





26) Use Cases VISA

    Discussion-worthy points: Provisioning time - RSM problem - moving CSP

https://www.cloudphysics.com/static/uploads/2019/02/Global-IT-Data-Lake-Q4-2016-Final.pdf